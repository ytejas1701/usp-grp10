import styles from './SecondFactor.module.css';
import { getDatabase, ref, update } from "firebase/database";
import app from '../../firebase';
import { useRef, useState } from 'react';
import { useNavigate, useOutletContext } from 'react-router-dom';

const TOTP = ()=>{
    var attemptsCount = useRef(0);
    var startTime = useRef(performance.now());

    const navigate = useNavigate();

    const user = useOutletContext();

    const inputRef = useRef(null);

    const [responseState, setResponseState] = useState('');

    const verifyTOTP = async (code)=>{
        try {
            const response = await fetch("https://usp-grp10.herokuapp.com/totp/verify",{
                method:"POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body:JSON.stringify({secret:user.secret, code}),
            });
            if(!response.ok) throw new Error();
            const {isVerified} = await response.json();
            if(isVerified) {
                setResponseState(styles.correct);
                var timeTaken = (performance.now() - startTime.current) / 1000;
                await updateDatabase(timeTaken, attemptsCount)
                setTimeout(()=>navigate('/login'), 1000);
            }
            else setResponseState(styles.incorrect);
        } catch (error) {
            console.log(error.message);
        }
    }

    const updateDatabase = async (timeTaken, attempts)=>{
        try {
            const db = getDatabase(app);
            await update(ref(db, `users/${user.uid}`),{
                dataTOTP:{ 
                    isDone: true,
                    timeTaken,
                    attempts:attempts.current
                },
            });
        } catch (error) {
            console.log(error.message);
        }
    }

    const submitHandler = async (event)=>{
        event.preventDefault();
        attemptsCount.current++;
        setResponseState('');
        const enteredCode = inputRef.current.value;
        if(!enteredCode){ setTimeout(() => setResponseState(styles.incorrect), 1000); }
        else if(enteredCode.length !== 6){ setTimeout(() => setResponseState(styles.incorrect), 1000); }
        else await verifyTOTP(enteredCode);
    }

    return(
        <div className={styles.dialog}>
            <div className={styles.title}>
                <svg 
                    xmlns="http://www.w3.org/2000/svg" 
                    viewBox="0 0 16 16">
                    <path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z"/>
                </svg>
                Authenticate with Time Based OTP
            </div>
            <div className={styles.body}>Enter the latest TOTP generated by your authenticator app.</div>
            <form
                onSubmit={submitHandler} 
                className={responseState}>
                <input ref={inputRef}/>
                <svg
                    type='submit'
                    onClick={submitHandler}
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16">
                    <path d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>
                </svg>
            </form>
        </div>
    );
}

export default TOTP;